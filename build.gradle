plugins {
    id "net.saliman.cobertura" version "2.4.0"
}

group 'com.waves.ikb4stream'
version '1.0-SNAPSHOT'

apply plugin: 'java'

sourceCompatibility = 1.8

sourceSets {
    core {
        java {
            srcDirs = ['src/core']
        }
    }

    consumer {
        java {
            srcDirs = ['src/core', 'src/consumer']
            compileClasspath += core.compileClasspath + core.output
        }
    }

    producer {
        java {
            srcDirs = ['src/core', 'src/producer']
            compileClasspath += core.compileClasspath + core.output
        }
    }

    communicationKafka {
        java {
            srcDirs = ['src/core', 'src/communication/kafka']
            compileClasspath += core.compileClasspath + core.output
        }
    }

    communicationWeb {
        java {
            srcDirs = ['src/core', 'src/communication/web']
            compileClasspath += core.compileClasspath + core.output
        }
    }

    datasourceMeteo {
        java {
            srcDirs = ['src/core', 'src/datasource/weather']
            compileClasspath += core.compileClasspath + core.output
        }
    }

    datasourceRSS {
        java {
            srcDirs = ['src/core', 'src/datasource/rss']
            compileClasspath += core.compileClasspath + core.output
        }
    }

    datasourceOWM {
        java {
            srcDirs = ['src/core', 'src/datasource/owm']
            compileClasspath += core.compileClasspath + core.output
        }
    }

    datasourceFacebook {
        java {
            srcDirs = ['src/core', 'src/datasource/facebook']
            compileClasspath += core.compileClasspath + core.output
        }
    }

    datasourceTwitter {
        java {
            srcDirs = ['src/core', 'src/datasource/twitter']
            compileClasspath += core.compileClasspath + core.output
        }
    }

    datasourceTwittermock {
        java {
            srcDirs = ['src/core', 'src/datasource/twittermock']
            compileClasspath += core.compileClasspath + core.output
        }
    }

    datasourceDbpedia {
        java {
            srcDirs = ['src/core', 'src/datasource/dbpedia']
            compileClasspath += core.compileClasspath + core.output
        }
    }

    datasourceOpenAgenda {
        java {
            srcDirs = ['src/core', 'src/datasource/openagenda']
            compileClasspath += core.compileClasspath + core.output
        }
    }

    scoringFacebook {
        java {
            srcDirs = ['src/core', 'src/scoring/facebook']
            compileClasspath += core.compileClasspath + core.output
        }
    }

    scoringTwitter {
        java {
            srcDirs = ['src/core', 'src/scoring/twitter']
            compileClasspath += core.compileClasspath + core.output
        }
    }

    scoringMock {
        java {
            srcDirs = ['src/core', 'src/scoring/mock']
            compileClasspath += core.compileClasspath + core.output
        }
    }

    test {
        java {
            srcDirs = ['src/core', 'src/consumer', 'src/producer', 'src/test/', 'src/datasource', 'src/scoring',
                       'src/communication/web', 'src/datasource/weather', 'src/datasource/rss', 'src/communication/kafka',
                       'src/datasource/twitter', 'src/datasource/twittermock', 'src/datasource/dbpedia', 'src/datasource/owm',
                        'src/datasource/facebook', 'src/datasource/openagenda', 'src/communication/web', 'src/scoring/facebook', 'src/scoring/twitter',
                        'src/scoring/mock']

            compileClasspath += core.compileClasspath + core.output + consumer.compileClasspath + consumer.output +
                    producer.compileClasspath + producer.output + communicationKafka.compileClasspath +
                    communicationKafka.output + datasourceMeteo.compileClasspath + datasourceMeteo.output +
                    datasourceRSS.compileClasspath + datasourceRSS.output +
                    datasourceTwittermock.compileClasspath + datasourceTwittermock.output +
                    datasourceTwitter.compileClasspath + datasourceTwitter.output +
                    datasourceDbpedia.output + datasourceDbpedia.compileClasspath +
                    datasourceFacebook.output + datasourceFacebook.compileClasspath +
					datasourceOWM.output + datasourceOWM.compileClasspath +
                    datasourceOpenAgenda.output + datasourceOpenAgenda.compileClasspath +
                    communicationWeb.output + communicationWeb.compileClasspath +
                    scoringFacebook.compileClasspath + scoringFacebook.output +
                    scoringTwitter.compileClasspath + scoringTwitter.output +
                    scoringMock.compileClasspath + scoringMock.output

            runtimeClasspath = output + compileClasspath + runtimeClasspath
        }
    }
}

task packageCoreJar(type: Jar, description: 'Package the Core Jar') {
    archiveName = "ikb4stream-$version-core.jar"
    from sourceSets.core.output
    from { configurations.coreCompile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task packageConsumerJar(type: Jar, description: 'Package the Consumer Jar') {
    archiveName = "ikb4stream-$version-consumer.jar"
    manifest {
        attributes 'Main-Class': 'com.waves_rsp.ikb4stream.consumer.Main'
    }
    from sourceSets.consumer.output
    from { configurations.coreCompile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task packageProducerJar(type: Jar, description: 'Package the Producer Jar') {
    archiveName = "ikb4stream-$version-producer.jar"
    manifest {
        attributes 'Main-Class': 'com.waves_rsp.ikb4stream.producer.Main'
    }
    from sourceSets.producer.output
    from { configurations.coreCompile.collect { it.isDirectory() ? it : zipTree(it) } }
    from { configurations.producerCompile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task packageWeatherJar(type: Jar, description: 'Package the Weather Jar') {
    archiveName = "resources/datasource/weather/ikb4stream-$version-datasource-weather.jar"
    manifest {
        attributes 'Module-Class': 'com.waves_rsp.ikb4stream.datasource.rss.WeatherProducerConnector'
    }
    from sourceSets.datasourceMeteo.output
    from { configurations.coreCompile.collect { it.isDirectory() ? it : zipTree(it) } }
    from { configurations.datasourceMeteoCompile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task packageRssJar(type: Jar, description: 'Package the RSS Jar') {
    archiveName = "resources/datasource/rss/ikb4stream-$version-datasource-rss.jar"
    manifest {
        attributes 'Module-Class': 'com.waves_rsp.ikb4stream.datasource.rss.RSSProducerConnector'
    }
    from sourceSets.datasourceRSS.output
    from { configurations.coreCompile.collect { it.isDirectory() ? it : zipTree(it) } }
    from { configurations.datasourceRSSCompile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task packageOwmJar(type: Jar, description: 'Package the OWM Jar') {
    archiveName = "resources/datasource/owm/ikb4stream-$version-datasource-owm.jar"
    manifest {
        attributes 'Module-Class': 'com.waves_rsp.ikb4stream.datasource.owm.OWMProducerConnector'
    }
    from sourceSets.datasourceOWM.output
    from { configurations.coreCompile.collect { it.isDirectory() ? it : zipTree(it) } }
    from { configurations.datasourceOWMCompile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task packageFacebookJar(type: Jar, description: 'Package the Facebook Jar') {
    archiveName = "resources/datasource/facebook/ikb4stream-$version-datasource-facebook.jar"
    manifest {
        attributes 'Module-Class': 'com.waves_rsp.ikb4stream.datasource.facebook.FacebookProducerConnector'
    }
    from sourceSets.datasourceFacebook.output
    from { configurations.coreCompile.collect { it.isDirectory() ? it : zipTree(it) } }
    from { configurations.datasourceFacebookCompile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task packageTwitterJar(type: Jar, description: 'Package the Twitter Jar') {
    archiveName = "resources/datasource/twitter/ikb4stream-$version-datasource-twitter.jar"
    manifest {
        attributes 'Module-Class': 'com.waves_rsp.ikb4stream.datasource.twitter.TwitterProducerConnector'
    }
    from sourceSets.datasourceTwitter.output
    from { configurations.coreCompile.collect {it.isDirectory() ? it : zipTree(it) }}
    from { configurations.datasourceTwitterCompile.collect { it.isDirectory() ? it : zipTree(it) }}
    with jar
}


task packageTwitterMockJar(type: Jar, description: 'Package the Twitter Mock Jar') {
    archiveName = "resources/datasource/twittermock/ikb4stream-$version-datasource-twittermock.jar"
    manifest {
        attributes 'Module-Class': 'com.waves_rsp.ikb4stream.datasource.twittermock.TwitterMock'
    }
    from sourceSets.datasourceTwittermock.output
    from { configurations.coreCompile.collect { it.isDirectory() ? it : zipTree(it) }}
    with jar
}

task packageDbpediaJar(type: Jar, description: 'Package the Dbpedia Jar') {
    archiveName = "resources/datasource/dbpedia/ikb4stream-$version-datasource-dbpedia.jar"
    manifest {
        attributes 'Module-Class': 'com.waves_rsp.ikb4stream.datasource.dbpedia.DBpediaProducerConnector'
    }
    from sourceSets.datasourceDbpedia.output
    from { configurations.coreCompile.collect { it.isDirectory() ? it : zipTree(it) }}
    with jar
}

task packageOpenAgendaJar(type: Jar, description: 'Package the OpenAgenda Jar') {
    archiveName = "resources/datasource/openagenda/ikb4stream-$version-datasource-openagenda.jar"
    manifest {
        attributes 'Module-Class': 'com.waves_rsp.ikb4stream.datasource.openagenda.OpenAgendaProducerConnector'
    }
    from sourceSets.datasourceOpenAgenda.output
    from { configurations.coreCompile.collect { it.isDirectory() ? it : zipTree(it) }}
    with jar
}

task packageKafkaCommunicationJar(type: Jar, description: 'Package the Kafka Communication Jar') {
    archiveName = "resources/communication/kafka/ikb4stream-$version-communication-kafka.jar"
    manifest {
        attributes 'Module-Class': 'com.waves_rsp.ikb4stream.communication.kafka.KafkaCommunication'
    }
    from sourceSets.communicationKafka.output
    from { configurations.coreCompile.collect { it.isDirectory() ? it : zipTree(it) } }
    from { configurations.communicationKafkaCompile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task packageCommunicationWebJar(type: Jar, description: 'Package the Web Communication Jar') {
    archiveName = "resources/communication/web/ikb4stream-$version-communication-web.jar"
    manifest {
        attributes 'Module-Class': 'com.waves_rsp.ikb4stream.communication.web.WebCommunication'
    }
    from sourceSets.communicationWeb.output
    from { configurations.coreCompile.collect { it.isDirectory() ? it : zipTree(it) } }
    from { configurations.communicationWebCompile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task packageFacebookScoringJar(type: Jar, description: 'Package the Facebook Scoring Jar') {
    archiveName = "resources/scoreprocessor/facebook/ikb4stream-$version-scoring-facebook.jar"
    manifest {
        attributes 'Module-Class': 'com.waves_rsp.ikb4stream.scoring.facebook.FacebookScoreProcessor'
    }
    from sourceSets.scoringFacebook.output
    from { configurations.coreCompile.collect { it.isDirectory() ? it : zipTree(it) } }
    from { configurations.scoringFacebookCompile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task packageTwitterScoringJar(type: Jar, description: 'Package the Twitter Scoring Jar') {
    archiveName = "resources/scoreprocessor/twitter/ikb4stream-$version-scoring-twitter.jar"
    manifest {
        attributes 'Module-Class': 'com.waves_rsp.ikb4stream.scoring.twitter.TwitterScoreProcessor'
    }
    from sourceSets.scoringTwitter.output
    from { configurations.coreCompile.collect { it.isDirectory() ? it : zipTree(it) } }
    from { configurations.scoringTwitterCompile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task packageMockScoringJar(type: Jar, description: 'Package the Mock Scoring Jar') {
    archiveName = "resources/scoreprocessor/mock/ikb4stream-$version-scoring-mock.jar"
    manifest {
        attributes 'Module-Class': 'com.waves_rsp.ikb4stream.scoring.mock.MockScoreProcessor'
    }
    from sourceSets.scoringMock.output
    from { configurations.coreCompile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task copyConfigProperties(type: Copy) {
    from 'resources/'
    into 'build/libs/resources/'
    exclude('**/*.ttl')
}

task zipBuild(type: Zip) {
    classifier = 'all'
    from 'build/libs'
}

task packageAll(dependsOn: ['copyConfigProperties', 'packageConsumerJar', 'packageProducerJar', 'packageWeatherJar', 
    'packageRssJar', 'packageKafkaCommunicationJar', 'packageTwitterJar', 'packageDbpediaJar', 'packageFacebookJar', 
    'packageOwmJar', 'packageOpenAgendaJar', 'packageCommunicationWebJar', 'packageFacebookScoringJar', 'packageTwitterScoringJar', 
    'packageMockScoringJar']) {
}

task ci(dependsOn: ['packageAll', 'zipBuild']) {
    tasks.findByName('zipBuild').mustRunAfter 'packageAll'
}

task testAll(type: Test) {
    testClassesDir = sourceSets.test.output.classesDir
    classpath = sourceSets.test.runtimeClasspath
}

cobertura {
    coverageDirs = [file("build")]
    coverageSourceDirs = [file("src/communication"),file("src/consumer"),file("src/producer"),file("src/core")]
    coverageFormats = ['html', 'xml']
}

repositories {
    mavenCentral()
}

dependencies {
    // core
    coreCompile 'org.influxdb:influxdb-java:2.5'

    coreCompile 'ch.qos.logback:logback-core:1.1.3'
    coreCompile "ch.qos.logback:logback-classic:1.1.3"
    coreCompile 'org.slf4j:slf4j-simple:1.7.6'

    coreCompile 'org.apache.jena:jena-arq:2.9.3'
    coreCompile 'com.fasterxml.jackson.core:jackson-databind:2.8.6'
    coreCompile 'org.mongodb:mongodb-driver-async:3.2.2'
    coreCompile  group: 'org.apache.opennlp', name: 'opennlp-tools', version: '1.6.0'


    // producer


    // consumer

    //datasourceDbpedia

    //datasourceTwitter
    datasourceTwitterCompile 'org.twitter4j:twitter4j-stream:4.0.6'

    // datasource_Meteo
    datasourceMeteoCompile 'com.rometools:rome-modules:1.7.1'

    // datasource_rss
    datasourceRSSCompile 'com.rometools:rome-modules:1.7.1'

    
	//datasource_OPWweather
    datasourceOWMCompile 'net.aksingh:owm-japis:2.5.0.3'
    datasourceOWMCompile 'org.json:json:20140107'
    //datasourceOWMCompile 'org.apache.httpcomponents:httpclient:4.2.3'

    //datasource_facebook
    datasourceFacebookCompile 'com.restfb:restfb:1.34.1'

    // communication_kafka
    communicationKafkaCompile 'org.apache.kafka:kafka-streams:0.10.0.1'

    // communicationWeb
    communicationWebCompile 'io.vertx:vertx-web:3.0.0'

    // scoreprocessor_nlp

    //scoring_twitter
    scoringTwitterCompile 'org.twitter4j:twitter4j-stream:4.0.6'

    // scoring_facebook
    scoringFacebookCompile group: 'com.restfb', name: 'restfb', version: '1.34.1'

    // tests
    testCompile 'junit:junit:4.11'
}

configurations.all {
    exclude group: "org.slf4j", module: "slf4j-log4j12"
    exclude group: "log4j", module: "log4j"
}