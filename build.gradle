/*
 * Copyright (C) 2017 ikb4stream team
 * ikb4stream is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * ikb4stream is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
 */

plugins {
    id "net.saliman.cobertura" version "2.4.0"
}

group 'com.waves.ikb4stream'
version '1.0-SNAPSHOT'

apply plugin: 'java'

/***********************************************************************************************************************
 * Gradle build file for IKB4Stream Project
 *
 * The project is separated in multiple modules, each module have his
 * build file. All buildfile are located in /gradle folder. Don't forget
 * to add all new modules to "packageAll" & "generateJavadoc" tasks and
 * "test" sourceSets.
 **********************************************************************************************************************/

// core
apply from: 'gradle/core.gradle'

// communications
apply from: 'gradle/communication_kafka.gradle'
apply from: 'gradle/communication_web.gradle'

// datasource
apply from: 'gradle/datasource_dbpedia.gradle'
apply from: 'gradle/datasource_dbpediamock.gradle'
apply from: 'gradle/datasource_facebook.gradle'
apply from: 'gradle/datasource_facebookmock.gradle'
apply from: 'gradle/datasource_openagenda.gradle'
apply from: 'gradle/datasource_openagendamock.gradle'
apply from: 'gradle/datasource_owm.gradle'
apply from: 'gradle/datasource_rss.gradle'
apply from: 'gradle/datasource_twitter.gradle'
apply from: 'gradle/datasource_twittermock.gradle'
apply from: 'gradle/datasource_weather.gradle'

// scoring
apply from: 'gradle/scoring_event.gradle'
apply from: 'gradle/scoring_mock.gradle'
apply from: 'gradle/scoring_openagenda.gradle'
apply from: 'gradle/scoring_owm.gradle'
apply from: 'gradle/scoring_twitter.gradle'

sourceCompatibility = 1.8

sourceSets {
    consumer {
        java {
            srcDirs = ['src/core', 'src/consumer']
            compileClasspath += core.compileClasspath + core.output
        }
    }

    producer {
        java {
            srcDirs = ['src/core', 'src/producer']
            compileClasspath += core.compileClasspath + core.output
        }
    }

    test {
        java {
            srcDirs = ['src/core',
                       'src/consumer',
                       'src/producer',
                       'src/test/',
                       'src/datasource',
                       'src/scoring',
                       'src/communication/web',
                       'src/datasource/weather',
                       'src/datasource/rss',
                       'src/communication/kafka',
                       'src/datasource/twitter',
                       'src/datasource/twittermock',
                       'src/datasource/dbpedia',
                       'src/datasource/dbpediamock',
                       'src/datasource/owm',
                       'src/datasource/facebook',
                       'src/datasource/openagenda',
                       'src/communication/web',
                       'src/scoring/twitter',
                       'src/scoring/owm',
                       'src/scoring/mock',
                       'src/scoring/event',
                       'src/scoring/openagenda',
                       'src/datasource/openagendamock',
                       'src/datasource/facebookmock']

            compileClasspath +=
                    core.compileClasspath + core.output +
                    consumer.compileClasspath + consumer.output +
                    producer.compileClasspath + producer.output +
                    communicationKafka.compileClasspath + communicationKafka.output +
                    datasourceWeather.compileClasspath + datasourceWeather.output +
                    datasourceRSS.compileClasspath + datasourceRSS.output +
                    datasourceTwittermock.compileClasspath + datasourceTwittermock.output +
                    datasourceFacebookmock.compileClasspath + datasourceFacebookmock.output +
                    datasourceTwitter.compileClasspath + datasourceTwitter.output +
                    datasourceDbpedia.output + datasourceDbpedia.compileClasspath +
                    datasourceFacebook.output + datasourceFacebook.compileClasspath +
                    datasourceOWM.output + datasourceOWM.compileClasspath +
                    datasourceOpenAgenda.output + datasourceOpenAgenda.compileClasspath +
                    communicationWeb.output + communicationWeb.compileClasspath +
                    scoringOWM.compileClasspath + scoringOWM.output +
                    scoringTwitter.compileClasspath + scoringTwitter.output +
                    scoringMock.compileClasspath + scoringMock.output +
                    scoringEvent.compileClasspath + scoringEvent.output +
                    scoringOpenAgenda.compileClasspath + scoringOpenAgenda.output +
                    datasourceDbpediaMock.compileClasspath + datasourceDbpediaMock.output +
                    datasourceOpenAgendaMock.compileClasspath + datasourceOpenAgendaMock.output

            runtimeClasspath = output + compileClasspath + runtimeClasspath
        }
    }
}

task generateJavadoc(type: Javadoc) {
    source += sourceSets.core.allJava +
            sourceSets.consumer.allJava +
            sourceSets.producer.allJava +
            sourceSets.communicationKafka.allJava +
            sourceSets.datasourceWeather.allJava +
            sourceSets.datasourceRSS.allJava +
            sourceSets.datasourceTwittermock.allJava +
            sourceSets.datasourceFacebookmock.allJava +
            sourceSets.datasourceTwitter.allJava +
            sourceSets.datasourceDbpedia.allJava +
            sourceSets.datasourceFacebook.allJava +
            sourceSets.datasourceOWM.allJava +
            sourceSets.datasourceOpenAgenda.allJava +
            sourceSets.communicationWeb.allJava +
            sourceSets.scoringOWM.allJava +
            sourceSets.scoringTwitter.allJava +
            sourceSets.scoringMock.allJava +
            sourceSets.scoringEvent.allJava +
            sourceSets.scoringOpenAgenda.allJava +
            sourceSets.datasourceDbpediaMock.allJava +
            sourceSets.datasourceOpenAgendaMock.allJava
    classpath += sourceSets.core.compileClasspath +
            sourceSets.consumer.compileClasspath +
            sourceSets.producer.compileClasspath +
            sourceSets.communicationKafka.compileClasspath +
            sourceSets.datasourceWeather.compileClasspath +
            sourceSets.datasourceRSS.compileClasspath +
            sourceSets.datasourceTwittermock.compileClasspath +
            sourceSets.datasourceFacebookmock.compileClasspath +
            sourceSets.datasourceTwitter.compileClasspath +
            sourceSets.datasourceDbpedia.compileClasspath +
            sourceSets.datasourceFacebook.compileClasspath +
            sourceSets.datasourceOWM.compileClasspath +
            sourceSets.datasourceOpenAgenda.compileClasspath +
            sourceSets.communicationWeb.compileClasspath +
            sourceSets.scoringOWM.compileClasspath +
            sourceSets.scoringTwitter.compileClasspath +
            sourceSets.scoringMock.compileClasspath +
            sourceSets.scoringEvent.compileClasspath +
            sourceSets.scoringOpenAgenda.compileClasspath +
            sourceSets.datasourceDbpediaMock.compileClasspath +
            sourceSets.datasourceOpenAgendaMock.compileClasspath
    destinationDir = file("${buildDir}/docs/javadoc")
    options.memberLevel = JavadocMemberLevel.PRIVATE
    options.author = true
    options.version = true
    println (title == null? '<null>' : title)
}

task packageConsumerJar(type: Jar, description: 'Package the Consumer Jar') {
    archiveName = "ikb4stream-$version-consumer.jar"
    manifest {
        attributes 'Main-Class': 'com.waves_rsp.ikb4stream.consumer.Main'
    }
    from 'resources/logback.xml'
    from 'resources/logback.properties'
    from sourceSets.consumer.output
    from { configurations.coreCompile.collect { it.isDirectory() ? it : zipTree(it) } }
    from { configurations.consumerCompile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task packageProducerJar(type: Jar, description: 'Package the Producer Jar') {
    archiveName = "ikb4stream-$version-producer.jar"
    manifest {
        attributes 'Main-Class': 'com.waves_rsp.ikb4stream.producer.Main'
    }
    from 'resources/logback.xml'
    from 'resources/logback.properties'
    from sourceSets.producer.output
    from { configurations.coreCompile.collect { it.isDirectory() ? it : zipTree(it) } }
    from { configurations.producerCompile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task copyConfigProperties(type: Copy) {
    from 'resources/'
    into 'build/libs/resources/'
    exclude('**/*.ttl', '**/logback.xml', '**/logback.properties')
}

task zipBuild(type: Zip) {
    classifier = 'all'
    from 'build/libs'
}

task packageAll(dependsOn: ['copyConfigProperties',
                            'packageConsumerJar',
                            'packageProducerJar',
                            'packageWeatherJar',
                            'packageRssJar',
                            'packageKafkaCommunicationJar',
                            'packageTwitterJar',
                            'packageDbpediaJar',
                            'packageFacebookJar',
                            'packageOwmJar',
                            'packageOpenAgendaJar',
                            'packageCommunicationWebJar',
                            'packageEventScoringJar',
                            'packageTwitterScoringJar',
                            'packageOpenAgendaScoringJar',
                            'packageTwitterMockJar',
                            'packageFacebookMockJar']) { }

task ci(dependsOn: ['packageAll', 'zipBuild']) {
    tasks.findByName('zipBuild').mustRunAfter 'packageAll'
}

task testAll(type: Test) {
    testClassesDir = sourceSets.test.output.classesDir
    classpath = sourceSets.test.runtimeClasspath
}

cobertura {
    coverageDirs = [file("build")]
    coverageSourceDirs = [file("src/communication"),file("src/consumer"),file("src/producer"),file("src/core")]
    coverageFormats = ['html', 'xml']
}

repositories {
    mavenCentral()
}

dependencies {
    testCompile 'junit:junit:4.11'
}

configurations.all {
    exclude group: "org.slf4j", module: "slf4j-log4j12"
    exclude group: "log4j", module: "log4j"
}