group 'com.waves.ikb4stream'
version '1.0-SNAPSHOT'

apply plugin: 'java'

sourceCompatibility = 1.8

sourceSets {
    core {
        java {
            srcDirs = ['src/core']
        }
    }

    consumer {
        java {
            srcDirs = ['src/core', 'src/consumer']
            compileClasspath += core.compileClasspath + core.output
        }
    }

    producer {
        java {
            srcDirs = ['src/core', 'src/producer']
            compileClasspath += core.compileClasspath + core.output
        }
    }

    communicationKafka {
        java {
            srcDirs = ['src/core', 'src/communication/kafka']
            compileClasspath += core.compileClasspath + core.output
        }
    }

    communicationWeb {
        java {
            srcDirs = ['src/communication/web']
            compileClasspath += core.compileClasspath + core.output
        }
    }

    datasourceMeteo {
        java {
            srcDirs = ['src/core', 'src/datasource/weather']
            compileClasspath += core.compileClasspath + core.output
        }
    }

    datasourceRSS {
        java {
            srcDirs = ['src/core', 'src/datasource/rss']
            compileClasspath += core.compileClasspath + core.output
        }
    }

    test {
        java {
            srcDirs = ['src/core', 'src/consumer', 'src/producer', 'src/test/', 'src/datasource',
                       'src/datasource/weather', 'src/datasource/rss', 'src/communication/kafka', 'src/communication/web']

            compileClasspath += core.compileClasspath + core.output + consumer.compileClasspath + consumer.output +
                    producer.compileClasspath + producer.output + communicationKafka.compileClasspath +
                    communicationKafka.output + datasourceMeteo.compileClasspath + datasourceMeteo.output +
                    datasourceRSS.compileClasspath + datasourceRSS.output +
                    communicationWeb.compileClasspath + communicationWeb.output
            runtimeClasspath = output + compileClasspath + runtimeClasspath
        }
    }
}

task packageConsumerJar(type: Jar, description: 'Package the Consumer Jar') {
    archiveName = "ikb4stream-$version-consumer.jar"
    manifest {
        attributes 'Main-Class': 'com.waves_rsp.ikb4stream.consumer.Main'
    }
    from sourceSets.consumer.output
    from { configurations.coreCompile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task packageProducerJar(type: Jar, description: 'Package the Producer Jar') {
    archiveName = "ikb4stream-$version-producer.jar"
    manifest {
        attributes 'Main-Class': 'com.waves_rsp.ikb4stream.producer.Main'
    }
    from sourceSets.producer.output
    from { configurations.coreCompile.collect { it.isDirectory() ? it : zipTree(it) } }
    from { configurations.producerCompile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task packageWeatherJar(type: Jar, description: 'Package the Weather Jar') {
    archiveName = "resources/datasource/ikb4stream-$version-datasource-weather.jar"
    from sourceSets.datasourceMeteo.output
    from { configurations.coreCompile.collect { it.isDirectory() ? it : zipTree(it) } }
    from { configurations.datasourceMeteoCompile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task packageRssJar(type: Jar, description: 'Package the RSS Jar') {
    archiveName = "resources/datasource/ikb4stream-$version-datasource-rss.jar"
    from sourceSets.datasourceRSS.output
    from { configurations.coreCompile.collect { it.isDirectory() ? it : zipTree(it) } }
    from { configurations.datasourceRSSCompile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task packageCommunicationKafkaJar(type: Jar, description: 'Package the Kafka Communication Jar') {
    archiveName = "resources/communication/ikb4stream-$version-communication-kafka.jar"
    from sourceSets.communicationKafka.output
    from { configurations.coreCompile.collect { it.isDirectory() ? it : zipTree(it) } }
    from { configurations.communicationKafkaCompile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task packageCommunicationWebJar(type: Jar, description: 'Package the Web Communication Jar') {
    archiveName = "resources/communication/ikb4stream-$version-communication-web.jar"
    from sourceSets.communicationWeb.output
    from { configurations.coreCompile.collect { it.isDirectory() ? it : zipTree(it) } }
    from { configurations.communicationWebCompile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task copyConfigProperties(type: Copy) {
    from 'resources/config.properties'
    into 'build/libs/resources/'
}

task zipBuild(type: Zip) {
    classifier = 'all'
    from 'build/libs'
}

task packageAll(dependsOn: ['copyConfigProperties', 'packageConsumerJar', 'packageProducerJar', 'packageWeatherJar', 'packageRssJar', 'packageCommunicationKafkaJar', 'packageCommunicationWebJar']) {

}

task ci(dependsOn: ['packageAll', 'zipBuild']) {
    tasks.findByName('zipBuild').mustRunAfter 'packageAll'
}

task testAll(type: Test) {
    testClassesDir = sourceSets.test.output.classesDir
    classpath = sourceSets.test.runtimeClasspath
}

repositories {
    mavenCentral()
}

dependencies {
    // core
    coreCompile 'org.influxdb:influxdb-java:2.5'
    coreCompile 'org.slf4j:slf4j-simple:1.7.6'
    coreCompile 'org.apache.jena:jena-arq:2.9.3'
    coreCompile 'com.fasterxml.jackson.core:jackson-databind:2.8.6'
    coreCompile 'org.mongodb:mongodb-driver-async:3.2.2'


    // producer
    producerCompile 'edu.stanford.nlp:stanford-corenlp:3.7.0'
    producerCompile 'edu.stanford.nlp:stanford-corenlp:3.7.0:models-french'

    // consumer

    // datasource_Meteo
    datasourceMeteoCompile 'com.rometools:rome-modules:1.7.1'

    // datasource_rss
    datasourceRSSCompile 'com.rometools:rome-modules:1.7.1'

    // communication_kafka
    communicationKafkaCompile 'org.apache.kafka:kafka-streams:0.10.0.1'

    // communicationWeb
    communicationWebCompile 'io.vertx:vertx-web:3.0.0'


    // scoreprocessor_nlp

    // tests
    testCompile 'junit:junit:4.11'
}